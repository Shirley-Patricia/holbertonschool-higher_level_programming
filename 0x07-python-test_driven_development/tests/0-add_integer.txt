=======================
doctest to add integers
=======================
this library only have add integer.

Numbers
=======
::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::
    >>> add_integer(2.0, 3)
    5

::
    >>> add_integer(1)
	99

::
    >>> add_integer(3.2, 5.6)
    8

::
    >>> add_integer(-5, -16)
    -21

::
    >>> add_integer(-5, 23)
    18

::

	>>> add_integer(-3.7, -0.4)
	-3

::

	>>> add_integer(-0.4, 3)
	3


string
======
::
    >>> add_integer("hello", 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::
    >>> add_integer(5, "hello")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::
    >>> add_integer(5, "h")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::
    >>> add_integer("k", 68)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Boolean
=========

::
    >>> add_integer(True, 68)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::

    >>> add_integer(False, 68)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::
    >>> add_integer(5, True)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::

    >>> add_integer(52, False)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


Tuples
=======

::
    >>> try:
    ...     add_integer((2, 2), (2, 2))
    ... except Exception as e:
    ...     print(e)
    a must be an integer

::
    >>> try:
    ...     add_integer((2, 2), )
    ... except Exception as e:
    ...     print(e)
    a must be an integer

::
    >>> try:
    ...     add_integer(5, (2, 2))
    ... except Exception as e:
    ...     print(e)
    b must be an integer

Strings
=======
::
    >>> try:
    ...    add_integer("Holberton", 2)
    ... except Exception as e:
    ...    print(e)
    a must be an integer

::
    >>> try:
    ...    add_integer(2, "Holberton")
    ... except Exception as e:
    ...    print(e)
    b must be an integer

None
=======
::
    >>> try:
    ...    add_integer(None)
    ... except Exception as e:
    ...    print(e)
    a must be an integer

::
    >>> try:
    ...    add_integer(3, None)
    ... except Exception as e:
    ...    print(e)
    b must be an integer

::

    >>> add_integer(80, -2, 8)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

::

    >>> add_integer(2, float('inf')) 
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer 

::

    >>> add_integer(3, float('nan')) 
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer